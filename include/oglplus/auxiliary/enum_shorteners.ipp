/*
 *  .file oglplus/auxiliary/enum_shorteners.ipp
 *
 *  Automatically generated header file. DO NOT modify manually,
 *  edit 'source/enums/*.txt' instead.
 *
 *  Copyright 2010-2012 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */

struct _1D {template <typename Enum> operator Enum (void) const{ return Enum::_1D; }};
struct _1DArray {template <typename Enum> operator Enum (void) const{ return Enum::_1DArray; }};
struct _2D {template <typename Enum> operator Enum (void) const{ return Enum::_2D; }};
struct _2DArray {template <typename Enum> operator Enum (void) const{ return Enum::_2DArray; }};
struct _2DMultisample {template <typename Enum> operator Enum (void) const{ return Enum::_2DMultisample; }};
struct _2DMultisampleArray {template <typename Enum> operator Enum (void) const{ return Enum::_2DMultisampleArray; }};
struct _3D {template <typename Enum> operator Enum (void) const{ return Enum::_3D; }};
struct A {template <typename Enum> operator Enum (void) const{ return Enum::A; }};
struct AccumAdjacentPairs {template <typename Enum> operator Enum (void) const{ return Enum::AccumAdjacentPairs; }};
struct AccumBuffer {template <typename Enum> operator Enum (void) const{ return Enum::AccumBuffer; }};
struct Add {template <typename Enum> operator Enum (void) const{ return Enum::Add; }};
struct AdjacentPairs {template <typename Enum> operator Enum (void) const{ return Enum::AdjacentPairs; }};
struct Affine2D {template <typename Enum> operator Enum (void) const{ return Enum::Affine2D; }};
struct Affine3D {template <typename Enum> operator Enum (void) const{ return Enum::Affine3D; }};
struct All {template <typename Enum> operator Enum (void) const{ return Enum::All; }};
struct AllAttribs {template <typename Enum> operator Enum (void) const{ return Enum::AllAttribs; }};
struct AllShaders {template <typename Enum> operator Enum (void) const{ return Enum::AllShaders; }};
struct Alpha {template <typename Enum> operator Enum (void) const{ return Enum::Alpha; }};
struct AlreadySignaled {template <typename Enum> operator Enum (void) const{ return Enum::AlreadySignaled; }};
struct Always {template <typename Enum> operator Enum (void) const{ return Enum::Always; }};
struct And {template <typename Enum> operator Enum (void) const{ return Enum::And; }};
struct AndInverted {template <typename Enum> operator Enum (void) const{ return Enum::AndInverted; }};
struct AndReverse {template <typename Enum> operator Enum (void) const{ return Enum::AndReverse; }};
struct AnySamplesPassed {template <typename Enum> operator Enum (void) const{ return Enum::AnySamplesPassed; }};
struct API {template <typename Enum> operator Enum (void) const{ return Enum::API; }};
struct Application {template <typename Enum> operator Enum (void) const{ return Enum::Application; }};
struct ArcTo {template <typename Enum> operator Enum (void) const{ return Enum::ArcTo; }};
struct Array {template <typename Enum> operator Enum (void) const{ return Enum::Array; }};
struct AtomicCounter {template <typename Enum> operator Enum (void) const{ return Enum::AtomicCounter; }};
struct B {template <typename Enum> operator Enum (void) const{ return Enum::B; }};
struct Back {template <typename Enum> operator Enum (void) const{ return Enum::Back; }};
struct BackLeft {template <typename Enum> operator Enum (void) const{ return Enum::BackLeft; }};
struct BackRight {template <typename Enum> operator Enum (void) const{ return Enum::BackRight; }};
struct Bevel {template <typename Enum> operator Enum (void) const{ return Enum::Bevel; }};
struct BGR {template <typename Enum> operator Enum (void) const{ return Enum::BGR; }};
struct BGRA {template <typename Enum> operator Enum (void) const{ return Enum::BGRA; }};
struct BGRAInteger {template <typename Enum> operator Enum (void) const{ return Enum::BGRAInteger; }};
struct BGRInteger {template <typename Enum> operator Enum (void) const{ return Enum::BGRInteger; }};
struct Blend {template <typename Enum> operator Enum (void) const{ return Enum::Blend; }};
struct Blue {template <typename Enum> operator Enum (void) const{ return Enum::Blue; }};
struct BlueInteger {template <typename Enum> operator Enum (void) const{ return Enum::BlueInteger; }};
struct Bold {template <typename Enum> operator Enum (void) const{ return Enum::Bold; }};
struct Bool {template <typename Enum> operator Enum (void) const{ return Enum::Bool; }};
struct BoolVec2 {template <typename Enum> operator Enum (void) const{ return Enum::BoolVec2; }};
struct BoolVec3 {template <typename Enum> operator Enum (void) const{ return Enum::BoolVec3; }};
struct BoolVec4 {template <typename Enum> operator Enum (void) const{ return Enum::BoolVec4; }};
struct BoundingBox {template <typename Enum> operator Enum (void) const{ return Enum::BoundingBox; }};
struct BoundingBoxOfBoundingBoxes {template <typename Enum> operator Enum (void) const{ return Enum::BoundingBoxOfBoundingBoxes; }};
struct Buffer {template <typename Enum> operator Enum (void) const{ return Enum::Buffer; }};
struct BufferUpdate {template <typename Enum> operator Enum (void) const{ return Enum::BufferUpdate; }};
struct Byte {template <typename Enum> operator Enum (void) const{ return Enum::Byte; }};
struct CCW {template <typename Enum> operator Enum (void) const{ return Enum::CCW; }};
struct CircularCCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::CircularCCWArcTo; }};
struct CircularCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::CircularCWArcTo; }};
struct CircularTangentArcTo {template <typename Enum> operator Enum (void) const{ return Enum::CircularTangentArcTo; }};
struct ClampToBorder {template <typename Enum> operator Enum (void) const{ return Enum::ClampToBorder; }};
struct ClampToEdge {template <typename Enum> operator Enum (void) const{ return Enum::ClampToEdge; }};
struct Clear {template <typename Enum> operator Enum (void) const{ return Enum::Clear; }};
struct ClipDistance {template <typename Enum> operator Enum (void) const{ return Enum::ClipDistance; }};
struct Close {template <typename Enum> operator Enum (void) const{ return Enum::Close; }};
struct Color {template <typename Enum> operator Enum (void) const{ return Enum::Color; }};
struct Color1 {template <typename Enum> operator Enum (void) const{ return Enum::Color1; }};
struct Color10 {template <typename Enum> operator Enum (void) const{ return Enum::Color10; }};
struct Color11 {template <typename Enum> operator Enum (void) const{ return Enum::Color11; }};
struct Color12 {template <typename Enum> operator Enum (void) const{ return Enum::Color12; }};
struct Color13 {template <typename Enum> operator Enum (void) const{ return Enum::Color13; }};
struct Color14 {template <typename Enum> operator Enum (void) const{ return Enum::Color14; }};
struct Color15 {template <typename Enum> operator Enum (void) const{ return Enum::Color15; }};
struct Color2 {template <typename Enum> operator Enum (void) const{ return Enum::Color2; }};
struct Color3 {template <typename Enum> operator Enum (void) const{ return Enum::Color3; }};
struct Color4 {template <typename Enum> operator Enum (void) const{ return Enum::Color4; }};
struct Color5 {template <typename Enum> operator Enum (void) const{ return Enum::Color5; }};
struct Color6 {template <typename Enum> operator Enum (void) const{ return Enum::Color6; }};
struct Color7 {template <typename Enum> operator Enum (void) const{ return Enum::Color7; }};
struct Color8 {template <typename Enum> operator Enum (void) const{ return Enum::Color8; }};
struct Color9 {template <typename Enum> operator Enum (void) const{ return Enum::Color9; }};
struct ColorBuffer {template <typename Enum> operator Enum (void) const{ return Enum::ColorBuffer; }};
struct ColorLogicOp {template <typename Enum> operator Enum (void) const{ return Enum::ColorLogicOp; }};
struct Command {template <typename Enum> operator Enum (void) const{ return Enum::Command; }};
struct CompareRefToTexture {template <typename Enum> operator Enum (void) const{ return Enum::CompareRefToTexture; }};
struct Complete {template <typename Enum> operator Enum (void) const{ return Enum::Complete; }};
struct CompressedRed {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRed; }};
struct CompressedRedRGTC1 {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRedRGTC1; }};
struct CompressedRG {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRG; }};
struct CompressedRGB {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRGB; }};
struct CompressedRGBA {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRGBA; }};
struct CompressedRGRGTC2 {template <typename Enum> operator Enum (void) const{ return Enum::CompressedRGRGTC2; }};
struct CompressedSignedRedRGTC1 {template <typename Enum> operator Enum (void) const{ return Enum::CompressedSignedRedRGTC1; }};
struct CompressedSignedRGRGTC2 {template <typename Enum> operator Enum (void) const{ return Enum::CompressedSignedRGRGTC2; }};
struct CompressedSRGB {template <typename Enum> operator Enum (void) const{ return Enum::CompressedSRGB; }};
struct CompressedSRGBAlpha {template <typename Enum> operator Enum (void) const{ return Enum::CompressedSRGBAlpha; }};
struct ConditionSatisfied {template <typename Enum> operator Enum (void) const{ return Enum::ConditionSatisfied; }};
struct ConstantAlpha {template <typename Enum> operator Enum (void) const{ return Enum::ConstantAlpha; }};
struct ConstantColor {template <typename Enum> operator Enum (void) const{ return Enum::ConstantColor; }};
struct ConvexHull {template <typename Enum> operator Enum (void) const{ return Enum::ConvexHull; }};
struct Copy {template <typename Enum> operator Enum (void) const{ return Enum::Copy; }};
struct CopyInverted {template <typename Enum> operator Enum (void) const{ return Enum::CopyInverted; }};
struct CopyRead {template <typename Enum> operator Enum (void) const{ return Enum::CopyRead; }};
struct CopyWrite {template <typename Enum> operator Enum (void) const{ return Enum::CopyWrite; }};
struct CountDown {template <typename Enum> operator Enum (void) const{ return Enum::CountDown; }};
struct CountUp {template <typename Enum> operator Enum (void) const{ return Enum::CountUp; }};
struct CubeMap {template <typename Enum> operator Enum (void) const{ return Enum::CubeMap; }};
struct CubeMapArray {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapArray; }};
struct CubeMapNegativeX {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapNegativeX; }};
struct CubeMapNegativeY {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapNegativeY; }};
struct CubeMapNegativeZ {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapNegativeZ; }};
struct CubeMapPositiveX {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapPositiveX; }};
struct CubeMapPositiveY {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapPositiveY; }};
struct CubeMapPositiveZ {template <typename Enum> operator Enum (void) const{ return Enum::CubeMapPositiveZ; }};
struct CubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::CubicCurveTo; }};
struct CullFace {template <typename Enum> operator Enum (void) const{ return Enum::CullFace; }};
struct Current {template <typename Enum> operator Enum (void) const{ return Enum::Current; }};
struct CW {template <typename Enum> operator Enum (void) const{ return Enum::CW; }};
struct Decr {template <typename Enum> operator Enum (void) const{ return Enum::Decr; }};
struct DecrWrap {template <typename Enum> operator Enum (void) const{ return Enum::DecrWrap; }};
struct DeprecatedBehavior {template <typename Enum> operator Enum (void) const{ return Enum::DeprecatedBehavior; }};
struct Depth {template <typename Enum> operator Enum (void) const{ return Enum::Depth; }};
struct Depth24Stencil8 {template <typename Enum> operator Enum (void) const{ return Enum::Depth24Stencil8; }};
struct Depth32fStencil8 {template <typename Enum> operator Enum (void) const{ return Enum::Depth32fStencil8; }};
struct DepthBuffer {template <typename Enum> operator Enum (void) const{ return Enum::DepthBuffer; }};
struct DepthComponent {template <typename Enum> operator Enum (void) const{ return Enum::DepthComponent; }};
struct DepthComponent16 {template <typename Enum> operator Enum (void) const{ return Enum::DepthComponent16; }};
struct DepthComponent24 {template <typename Enum> operator Enum (void) const{ return Enum::DepthComponent24; }};
struct DepthComponent32 {template <typename Enum> operator Enum (void) const{ return Enum::DepthComponent32; }};
struct DepthComponent32F {template <typename Enum> operator Enum (void) const{ return Enum::DepthComponent32F; }};
struct DepthStencil {template <typename Enum> operator Enum (void) const{ return Enum::DepthStencil; }};
struct DepthTest {template <typename Enum> operator Enum (void) const{ return Enum::DepthTest; }};
struct Dither {template <typename Enum> operator Enum (void) const{ return Enum::Dither; }};
struct DontCare {template <typename Enum> operator Enum (void) const{ return Enum::DontCare; }};
struct Double {template <typename Enum> operator Enum (void) const{ return Enum::Double; }};
struct DoubleMat2 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat2; }};
struct DoubleMat2x3 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat2x3; }};
struct DoubleMat2x4 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat2x4; }};
struct DoubleMat3 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat3; }};
struct DoubleMat3x2 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat3x2; }};
struct DoubleMat3x4 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat3x4; }};
struct DoubleMat4 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat4; }};
struct DoubleMat4x2 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat4x2; }};
struct DoubleMat4x3 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleMat4x3; }};
struct DoubleVec2 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleVec2; }};
struct DoubleVec3 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleVec3; }};
struct DoubleVec4 {template <typename Enum> operator Enum (void) const{ return Enum::DoubleVec4; }};
struct Draw {template <typename Enum> operator Enum (void) const{ return Enum::Draw; }};
struct DrawIndirect {template <typename Enum> operator Enum (void) const{ return Enum::DrawIndirect; }};
struct DstAlpha {template <typename Enum> operator Enum (void) const{ return Enum::DstAlpha; }};
struct DstColor {template <typename Enum> operator Enum (void) const{ return Enum::DstColor; }};
struct DupFirstCubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::DupFirstCubicCurveTo; }};
struct DupLastCubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::DupLastCubicCurveTo; }};
struct DynamicCopy {template <typename Enum> operator Enum (void) const{ return Enum::DynamicCopy; }};
struct DynamicDraw {template <typename Enum> operator Enum (void) const{ return Enum::DynamicDraw; }};
struct DynamicRead {template <typename Enum> operator Enum (void) const{ return Enum::DynamicRead; }};
struct ElementArray {template <typename Enum> operator Enum (void) const{ return Enum::ElementArray; }};
struct Enable {template <typename Enum> operator Enum (void) const{ return Enum::Enable; }};
struct Equal {template <typename Enum> operator Enum (void) const{ return Enum::Equal; }};
struct Equiv {template <typename Enum> operator Enum (void) const{ return Enum::Equiv; }};
struct Error {template <typename Enum> operator Enum (void) const{ return Enum::Error; }};
struct Eval {template <typename Enum> operator Enum (void) const{ return Enum::Eval; }};
struct ExternalVirtualMemory {template <typename Enum> operator Enum (void) const{ return Enum::ExternalVirtualMemory; }};
struct EyeLinear {template <typename Enum> operator Enum (void) const{ return Enum::EyeLinear; }};
struct Fastest {template <typename Enum> operator Enum (void) const{ return Enum::Fastest; }};
struct Fence {template <typename Enum> operator Enum (void) const{ return Enum::Fence; }};
struct FileName {template <typename Enum> operator Enum (void) const{ return Enum::FileName; }};
struct Fill {template <typename Enum> operator Enum (void) const{ return Enum::Fill; }};
struct FillCover {template <typename Enum> operator Enum (void) const{ return Enum::FillCover; }};
struct FillMode {template <typename Enum> operator Enum (void) const{ return Enum::FillMode; }};
struct FirstToRest {template <typename Enum> operator Enum (void) const{ return Enum::FirstToRest; }};
struct FirstVertexConvention {template <typename Enum> operator Enum (void) const{ return Enum::FirstVertexConvention; }};
struct Fixed {template <typename Enum> operator Enum (void) const{ return Enum::Fixed; }};
struct Flat {template <typename Enum> operator Enum (void) const{ return Enum::Flat; }};
struct Float {template <typename Enum> operator Enum (void) const{ return Enum::Float; }};
struct Float_32UnsignedInt_24_8_Rev {template <typename Enum> operator Enum (void) const{ return Enum::Float_32UnsignedInt_24_8_Rev; }};
struct FloatMat2 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat2; }};
struct FloatMat2x3 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat2x3; }};
struct FloatMat2x4 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat2x4; }};
struct FloatMat3 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat3; }};
struct FloatMat3x2 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat3x2; }};
struct FloatMat3x4 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat3x4; }};
struct FloatMat4 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat4; }};
struct FloatMat4x2 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat4x2; }};
struct FloatMat4x3 {template <typename Enum> operator Enum (void) const{ return Enum::FloatMat4x3; }};
struct FloatVec2 {template <typename Enum> operator Enum (void) const{ return Enum::FloatVec2; }};
struct FloatVec3 {template <typename Enum> operator Enum (void) const{ return Enum::FloatVec3; }};
struct FloatVec4 {template <typename Enum> operator Enum (void) const{ return Enum::FloatVec4; }};
struct Fog {template <typename Enum> operator Enum (void) const{ return Enum::Fog; }};
struct FontAscender {template <typename Enum> operator Enum (void) const{ return Enum::FontAscender; }};
struct FontDescender {template <typename Enum> operator Enum (void) const{ return Enum::FontDescender; }};
struct FontHasKerning {template <typename Enum> operator Enum (void) const{ return Enum::FontHasKerning; }};
struct FontHeight {template <typename Enum> operator Enum (void) const{ return Enum::FontHeight; }};
struct FontMaxAdvanceHeight {template <typename Enum> operator Enum (void) const{ return Enum::FontMaxAdvanceHeight; }};
struct FontMaxAdvanceWidth {template <typename Enum> operator Enum (void) const{ return Enum::FontMaxAdvanceWidth; }};
struct FontUnderlinePosition {template <typename Enum> operator Enum (void) const{ return Enum::FontUnderlinePosition; }};
struct FontUnderlineThickness {template <typename Enum> operator Enum (void) const{ return Enum::FontUnderlineThickness; }};
struct FontUnitsPerEm {template <typename Enum> operator Enum (void) const{ return Enum::FontUnitsPerEm; }};
struct FontXMaxBounds {template <typename Enum> operator Enum (void) const{ return Enum::FontXMaxBounds; }};
struct FontXMinBounds {template <typename Enum> operator Enum (void) const{ return Enum::FontXMinBounds; }};
struct FontYMaxBounds {template <typename Enum> operator Enum (void) const{ return Enum::FontYMaxBounds; }};
struct FontYMinBounds {template <typename Enum> operator Enum (void) const{ return Enum::FontYMinBounds; }};
struct FractionalEven {template <typename Enum> operator Enum (void) const{ return Enum::FractionalEven; }};
struct FractionalOdd {template <typename Enum> operator Enum (void) const{ return Enum::FractionalOdd; }};
struct Fragment {template <typename Enum> operator Enum (void) const{ return Enum::Fragment; }};
struct FragmentShader {template <typename Enum> operator Enum (void) const{ return Enum::FragmentShader; }};
struct FragmentShaderDerivative {template <typename Enum> operator Enum (void) const{ return Enum::FragmentShaderDerivative; }};
struct Framebuffer {template <typename Enum> operator Enum (void) const{ return Enum::Framebuffer; }};
struct FramebufferSrgb {template <typename Enum> operator Enum (void) const{ return Enum::FramebufferSrgb; }};
struct Front {template <typename Enum> operator Enum (void) const{ return Enum::Front; }};
struct FrontAndBack {template <typename Enum> operator Enum (void) const{ return Enum::FrontAndBack; }};
struct FrontLeft {template <typename Enum> operator Enum (void) const{ return Enum::FrontLeft; }};
struct FrontRight {template <typename Enum> operator Enum (void) const{ return Enum::FrontRight; }};
struct G {template <typename Enum> operator Enum (void) const{ return Enum::G; }};
struct Geometry {template <typename Enum> operator Enum (void) const{ return Enum::Geometry; }};
struct GeometryShader {template <typename Enum> operator Enum (void) const{ return Enum::GeometryShader; }};
struct GEqual {template <typename Enum> operator Enum (void) const{ return Enum::GEqual; }};
struct GlyphHasKerning {template <typename Enum> operator Enum (void) const{ return Enum::GlyphHasKerning; }};
struct GlyphHeight {template <typename Enum> operator Enum (void) const{ return Enum::GlyphHeight; }};
struct GlyphHorizontalBearingAdvance {template <typename Enum> operator Enum (void) const{ return Enum::GlyphHorizontalBearingAdvance; }};
struct GlyphHorizontalBearingX {template <typename Enum> operator Enum (void) const{ return Enum::GlyphHorizontalBearingX; }};
struct GlyphHorizontalBearingY {template <typename Enum> operator Enum (void) const{ return Enum::GlyphHorizontalBearingY; }};
struct GlyphVerticalBearingAdvance {template <typename Enum> operator Enum (void) const{ return Enum::GlyphVerticalBearingAdvance; }};
struct GlyphVerticalBearingX {template <typename Enum> operator Enum (void) const{ return Enum::GlyphVerticalBearingX; }};
struct GlyphVerticalBearingY {template <typename Enum> operator Enum (void) const{ return Enum::GlyphVerticalBearingY; }};
struct GlyphWidth {template <typename Enum> operator Enum (void) const{ return Enum::GlyphWidth; }};
struct GPUCommandsComplete {template <typename Enum> operator Enum (void) const{ return Enum::GPUCommandsComplete; }};
struct Greater {template <typename Enum> operator Enum (void) const{ return Enum::Greater; }};
struct Green {template <typename Enum> operator Enum (void) const{ return Enum::Green; }};
struct GreenInteger {template <typename Enum> operator Enum (void) const{ return Enum::GreenInteger; }};
struct HalfFloat {template <typename Enum> operator Enum (void) const{ return Enum::HalfFloat; }};
struct High {template <typename Enum> operator Enum (void) const{ return Enum::High; }};
struct Hint {template <typename Enum> operator Enum (void) const{ return Enum::Hint; }};
struct HorizontalLineTo {template <typename Enum> operator Enum (void) const{ return Enum::HorizontalLineTo; }};
struct IncompleteAttachment {template <typename Enum> operator Enum (void) const{ return Enum::IncompleteAttachment; }};
struct IncompleteLayerTargets {template <typename Enum> operator Enum (void) const{ return Enum::IncompleteLayerTargets; }};
struct IncompleteMissingAttachment {template <typename Enum> operator Enum (void) const{ return Enum::IncompleteMissingAttachment; }};
struct IncompleteMultisample {template <typename Enum> operator Enum (void) const{ return Enum::IncompleteMultisample; }};
struct Incr {template <typename Enum> operator Enum (void) const{ return Enum::Incr; }};
struct IncrWrap {template <typename Enum> operator Enum (void) const{ return Enum::IncrWrap; }};
struct Int {template <typename Enum> operator Enum (void) const{ return Enum::Int; }};
struct Intensity {template <typename Enum> operator Enum (void) const{ return Enum::Intensity; }};
struct InterleavedAttribs {template <typename Enum> operator Enum (void) const{ return Enum::InterleavedAttribs; }};
struct IntSampler1D {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler1D; }};
struct IntSampler1DArray {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler1DArray; }};
struct IntSampler2D {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler2D; }};
struct IntSampler2DArray {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler2DArray; }};
struct IntSampler2DMultisample {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler2DMultisample; }};
struct IntSampler2DMultisampleArray {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler2DMultisampleArray; }};
struct IntSampler2DRect {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler2DRect; }};
struct IntSampler3D {template <typename Enum> operator Enum (void) const{ return Enum::IntSampler3D; }};
struct IntSamplerBuffer {template <typename Enum> operator Enum (void) const{ return Enum::IntSamplerBuffer; }};
struct IntSamplerCube {template <typename Enum> operator Enum (void) const{ return Enum::IntSamplerCube; }};
struct IntSamplerCubeMapArray {template <typename Enum> operator Enum (void) const{ return Enum::IntSamplerCubeMapArray; }};
struct IntVec2 {template <typename Enum> operator Enum (void) const{ return Enum::IntVec2; }};
struct IntVec3 {template <typename Enum> operator Enum (void) const{ return Enum::IntVec3; }};
struct IntVec4 {template <typename Enum> operator Enum (void) const{ return Enum::IntVec4; }};
struct InvalidEnum {template <typename Enum> operator Enum (void) const{ return Enum::InvalidEnum; }};
struct InvalidFramebufferOperation {template <typename Enum> operator Enum (void) const{ return Enum::InvalidFramebufferOperation; }};
struct InvalidOperation {template <typename Enum> operator Enum (void) const{ return Enum::InvalidOperation; }};
struct InvalidValue {template <typename Enum> operator Enum (void) const{ return Enum::InvalidValue; }};
struct Invert {template <typename Enum> operator Enum (void) const{ return Enum::Invert; }};
struct Isolines {template <typename Enum> operator Enum (void) const{ return Enum::Isolines; }};
struct Italic {template <typename Enum> operator Enum (void) const{ return Enum::Italic; }};
struct Keep {template <typename Enum> operator Enum (void) const{ return Enum::Keep; }};
struct LargeCCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::LargeCCWArcTo; }};
struct LargeCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::LargeCWArcTo; }};
struct LastVertexConvention {template <typename Enum> operator Enum (void) const{ return Enum::LastVertexConvention; }};
struct Left {template <typename Enum> operator Enum (void) const{ return Enum::Left; }};
struct LEqual {template <typename Enum> operator Enum (void) const{ return Enum::LEqual; }};
struct Less {template <typename Enum> operator Enum (void) const{ return Enum::Less; }};
struct Lighting {template <typename Enum> operator Enum (void) const{ return Enum::Lighting; }};
struct Line {template <typename Enum> operator Enum (void) const{ return Enum::Line; }};
struct Linear {template <typename Enum> operator Enum (void) const{ return Enum::Linear; }};
struct LinearMipmapLinear {template <typename Enum> operator Enum (void) const{ return Enum::LinearMipmapLinear; }};
struct LinearMipmapNearest {template <typename Enum> operator Enum (void) const{ return Enum::LinearMipmapNearest; }};
struct LineLoop {template <typename Enum> operator Enum (void) const{ return Enum::LineLoop; }};
struct Lines {template <typename Enum> operator Enum (void) const{ return Enum::Lines; }};
struct LinesAdjacency {template <typename Enum> operator Enum (void) const{ return Enum::LinesAdjacency; }};
struct LineSmooth {template <typename Enum> operator Enum (void) const{ return Enum::LineSmooth; }};
struct LineStrip {template <typename Enum> operator Enum (void) const{ return Enum::LineStrip; }};
struct LineStripAdjacency {template <typename Enum> operator Enum (void) const{ return Enum::LineStripAdjacency; }};
struct LineTo {template <typename Enum> operator Enum (void) const{ return Enum::LineTo; }};
struct List {template <typename Enum> operator Enum (void) const{ return Enum::List; }};
struct Low {template <typename Enum> operator Enum (void) const{ return Enum::Low; }};
struct Luminance {template <typename Enum> operator Enum (void) const{ return Enum::Luminance; }};
struct LuminanceAlpha {template <typename Enum> operator Enum (void) const{ return Enum::LuminanceAlpha; }};
struct Max {template <typename Enum> operator Enum (void) const{ return Enum::Max; }};
struct Max3DTextureSize {template <typename Enum> operator Enum (void) const{ return Enum::Max3DTextureSize; }};
struct MaxArrayTextureLayers {template <typename Enum> operator Enum (void) const{ return Enum::MaxArrayTextureLayers; }};
struct MaxAtomicCounterBufferBindings {template <typename Enum> operator Enum (void) const{ return Enum::MaxAtomicCounterBufferBindings; }};
struct MaxAtomicCounterBufferSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxAtomicCounterBufferSize; }};
struct MaxClipDistances {template <typename Enum> operator Enum (void) const{ return Enum::MaxClipDistances; }};
struct MaxColorAttachments {template <typename Enum> operator Enum (void) const{ return Enum::MaxColorAttachments; }};
struct MaxColorTextureSamples {template <typename Enum> operator Enum (void) const{ return Enum::MaxColorTextureSamples; }};
struct MaxCombinedAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedAtomicCounterBuffers; }};
struct MaxCombinedAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedAtomicCounters; }};
struct MaxCombinedFragmentUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedFragmentUniformComponents; }};
struct MaxCombinedGeometryUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedGeometryUniformComponents; }};
struct MaxCombinedImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedImageUniforms; }};
struct MaxCombinedImageUnitsAndFragmentOutputs {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedImageUnitsAndFragmentOutputs; }};
struct MaxCombinedTessControlUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedTessControlUniformComponents; }};
struct MaxCombinedTessEvaluationUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedTessEvaluationUniformComponents; }};
struct MaxCombinedTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedTextureImageUnits; }};
struct MaxCombinedUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedUniformBlocks; }};
struct MaxCombinedVertexUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxCombinedVertexUniformComponents; }};
struct MaxCubeMapTextureSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxCubeMapTextureSize; }};
struct MaxDepthTextureSamples {template <typename Enum> operator Enum (void) const{ return Enum::MaxDepthTextureSamples; }};
struct MaxDrawBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxDrawBuffers; }};
struct MaxDualSourceDrawBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxDualSourceDrawBuffers; }};
struct MaxElementsIndices {template <typename Enum> operator Enum (void) const{ return Enum::MaxElementsIndices; }};
struct MaxElementsVertices {template <typename Enum> operator Enum (void) const{ return Enum::MaxElementsVertices; }};
struct MaxFragmentAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentAtomicCounterBuffers; }};
struct MaxFragmentAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentAtomicCounters; }};
struct MaxFragmentImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentImageUniforms; }};
struct MaxFragmentInputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentInputComponents; }};
struct MaxFragmentInterpolationOffset {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentInterpolationOffset; }};
struct MaxFragmentUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentUniformBlocks; }};
struct MaxFragmentUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentUniformComponents; }};
struct MaxFragmentUniformVectors {template <typename Enum> operator Enum (void) const{ return Enum::MaxFragmentUniformVectors; }};
struct MaxGeometryAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryAtomicCounterBuffers; }};
struct MaxGeometryAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryAtomicCounters; }};
struct MaxGeometryImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryImageUniforms; }};
struct MaxGeometryInputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryInputComponents; }};
struct MaxGeometryOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryOutputComponents; }};
struct MaxGeometryOutputVertices {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryOutputVertices; }};
struct MaxGeometryShaderInvocations {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryShaderInvocations; }};
struct MaxGeometryTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryTextureImageUnits; }};
struct MaxGeometryTotalOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryTotalOutputComponents; }};
struct MaxGeometryUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryUniformBlocks; }};
struct MaxGeometryUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxGeometryUniformComponents; }};
struct MaxImageSamples {template <typename Enum> operator Enum (void) const{ return Enum::MaxImageSamples; }};
struct MaxImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxImageUnits; }};
struct MaxIntegerSamples {template <typename Enum> operator Enum (void) const{ return Enum::MaxIntegerSamples; }};
struct MaxPatchVertices {template <typename Enum> operator Enum (void) const{ return Enum::MaxPatchVertices; }};
struct MaxProgramTexelOffset {template <typename Enum> operator Enum (void) const{ return Enum::MaxProgramTexelOffset; }};
struct MaxProgramTextureGatherOffset {template <typename Enum> operator Enum (void) const{ return Enum::MaxProgramTextureGatherOffset; }};
struct MaxRectangleTextureSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxRectangleTextureSize; }};
struct MaxRenderbufferSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxRenderbufferSize; }};
struct MaxSampleMaskWords {template <typename Enum> operator Enum (void) const{ return Enum::MaxSampleMaskWords; }};
struct MaxSamples {template <typename Enum> operator Enum (void) const{ return Enum::MaxSamples; }};
struct MaxServerWaitTimeout {template <typename Enum> operator Enum (void) const{ return Enum::MaxServerWaitTimeout; }};
struct MaxSubroutines {template <typename Enum> operator Enum (void) const{ return Enum::MaxSubroutines; }};
struct MaxSubroutineUniformLocations {template <typename Enum> operator Enum (void) const{ return Enum::MaxSubroutineUniformLocations; }};
struct MaxTessControlAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlAtomicCounterBuffers; }};
struct MaxTessControlAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlAtomicCounters; }};
struct MaxTessControlImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlImageUniforms; }};
struct MaxTessControlInputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlInputComponents; }};
struct MaxTessControlOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlOutputComponents; }};
struct MaxTessControlTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlTextureImageUnits; }};
struct MaxTessControlTotalOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlTotalOutputComponents; }};
struct MaxTessControlUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlUniformBlocks; }};
struct MaxTessControlUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessControlUniformComponents; }};
struct MaxTessEvaluationAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationAtomicCounterBuffers; }};
struct MaxTessEvaluationAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationAtomicCounters; }};
struct MaxTessEvaluationImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationImageUniforms; }};
struct MaxTessEvaluationInputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationInputComponents; }};
struct MaxTessEvaluationOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationOutputComponents; }};
struct MaxTessEvaluationTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationTextureImageUnits; }};
struct MaxTessEvaluationUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationUniformBlocks; }};
struct MaxTessEvaluationUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessEvaluationUniformComponents; }};
struct MaxTessGenLevel {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessGenLevel; }};
struct MaxTessPatchComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTessPatchComponents; }};
struct MaxTextureBufferSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxTextureBufferSize; }};
struct MaxTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxTextureImageUnits; }};
struct MaxTextureLodBias {template <typename Enum> operator Enum (void) const{ return Enum::MaxTextureLodBias; }};
struct MaxTextureSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxTextureSize; }};
struct MaxTransformFeedbackBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxTransformFeedbackBuffers; }};
struct MaxTransformFeedbackInterleavedComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTransformFeedbackInterleavedComponents; }};
struct MaxTransformFeedbackSeparateAttribs {template <typename Enum> operator Enum (void) const{ return Enum::MaxTransformFeedbackSeparateAttribs; }};
struct MaxTransformFeedbackSeparateComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxTransformFeedbackSeparateComponents; }};
struct MaxUniformBlockSize {template <typename Enum> operator Enum (void) const{ return Enum::MaxUniformBlockSize; }};
struct MaxUniformBufferBindings {template <typename Enum> operator Enum (void) const{ return Enum::MaxUniformBufferBindings; }};
struct MaxVaryingComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxVaryingComponents; }};
struct MaxVaryingVectors {template <typename Enum> operator Enum (void) const{ return Enum::MaxVaryingVectors; }};
struct MaxVertexAtomicCounterBuffers {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexAtomicCounterBuffers; }};
struct MaxVertexAtomicCounters {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexAtomicCounters; }};
struct MaxVertexAttribs {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexAttribs; }};
struct MaxVertexImageUniforms {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexImageUniforms; }};
struct MaxVertexOutputComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexOutputComponents; }};
struct MaxVertexStreams {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexStreams; }};
struct MaxVertexTextureImageUnits {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexTextureImageUnits; }};
struct MaxVertexUniformBlocks {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexUniformBlocks; }};
struct MaxVertexUniformComponents {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexUniformComponents; }};
struct MaxVertexUniformVectors {template <typename Enum> operator Enum (void) const{ return Enum::MaxVertexUniformVectors; }};
struct MaxViewportDims {template <typename Enum> operator Enum (void) const{ return Enum::MaxViewportDims; }};
struct MaxViewports {template <typename Enum> operator Enum (void) const{ return Enum::MaxViewports; }};
struct Medium {template <typename Enum> operator Enum (void) const{ return Enum::Medium; }};
struct Min {template <typename Enum> operator Enum (void) const{ return Enum::Min; }};
struct MinFragmentInterpolationOffset {template <typename Enum> operator Enum (void) const{ return Enum::MinFragmentInterpolationOffset; }};
struct MinMapBufferAlignment {template <typename Enum> operator Enum (void) const{ return Enum::MinMapBufferAlignment; }};
struct MinProgramTexelOffset {template <typename Enum> operator Enum (void) const{ return Enum::MinProgramTexelOffset; }};
struct MinProgramTextureGatherOffset {template <typename Enum> operator Enum (void) const{ return Enum::MinProgramTextureGatherOffset; }};
struct MinSampleShadingValue {template <typename Enum> operator Enum (void) const{ return Enum::MinSampleShadingValue; }};
struct MirroredRepeat {template <typename Enum> operator Enum (void) const{ return Enum::MirroredRepeat; }};
struct MiterRevert {template <typename Enum> operator Enum (void) const{ return Enum::MiterRevert; }};
struct MiterTruncate {template <typename Enum> operator Enum (void) const{ return Enum::MiterTruncate; }};
struct Modelview {template <typename Enum> operator Enum (void) const{ return Enum::Modelview; }};
struct MoveTo {template <typename Enum> operator Enum (void) const{ return Enum::MoveTo; }};
struct MoveToContinues {template <typename Enum> operator Enum (void) const{ return Enum::MoveToContinues; }};
struct MoveToReset {template <typename Enum> operator Enum (void) const{ return Enum::MoveToReset; }};
struct Multisample {template <typename Enum> operator Enum (void) const{ return Enum::Multisample; }};
struct Nand {template <typename Enum> operator Enum (void) const{ return Enum::Nand; }};
struct Nearest {template <typename Enum> operator Enum (void) const{ return Enum::Nearest; }};
struct NearestMipmapLinear {template <typename Enum> operator Enum (void) const{ return Enum::NearestMipmapLinear; }};
struct NearestMipmapNearest {template <typename Enum> operator Enum (void) const{ return Enum::NearestMipmapNearest; }};
struct Never {template <typename Enum> operator Enum (void) const{ return Enum::Never; }};
struct Nicest {template <typename Enum> operator Enum (void) const{ return Enum::Nicest; }};
struct NoError {template <typename Enum> operator Enum (void) const{ return Enum::NoError; }};
struct None {template <typename Enum> operator Enum (void) const{ return Enum::None; }};
struct Noop {template <typename Enum> operator Enum (void) const{ return Enum::Noop; }};
struct Nor {template <typename Enum> operator Enum (void) const{ return Enum::Nor; }};
struct NotEqual {template <typename Enum> operator Enum (void) const{ return Enum::NotEqual; }};
struct ObjectBoundingBox {template <typename Enum> operator Enum (void) const{ return Enum::ObjectBoundingBox; }};
struct ObjectLinear {template <typename Enum> operator Enum (void) const{ return Enum::ObjectLinear; }};
struct One {template <typename Enum> operator Enum (void) const{ return Enum::One; }};
struct OneMinusConstantAlpha {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusConstantAlpha; }};
struct OneMinusConstantColor {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusConstantColor; }};
struct OneMinusDstAlpha {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusDstAlpha; }};
struct OneMinusDstColor {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusDstColor; }};
struct OneMinusSrc1Alpha {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusSrc1Alpha; }};
struct OneMinusSrc1Color {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusSrc1Color; }};
struct OneMinusSrcAlpha {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusSrcAlpha; }};
struct OneMinusSrcColor {template <typename Enum> operator Enum (void) const{ return Enum::OneMinusSrcColor; }};
struct Or {template <typename Enum> operator Enum (void) const{ return Enum::Or; }};
struct OrInverted {template <typename Enum> operator Enum (void) const{ return Enum::OrInverted; }};
struct OrReverse {template <typename Enum> operator Enum (void) const{ return Enum::OrReverse; }};
struct Other {template <typename Enum> operator Enum (void) const{ return Enum::Other; }};
struct OutOfMemory {template <typename Enum> operator Enum (void) const{ return Enum::OutOfMemory; }};
struct PackAlignment {template <typename Enum> operator Enum (void) const{ return Enum::PackAlignment; }};
struct PackCompressedBlockDepth {template <typename Enum> operator Enum (void) const{ return Enum::PackCompressedBlockDepth; }};
struct PackCompressedBlockHeight {template <typename Enum> operator Enum (void) const{ return Enum::PackCompressedBlockHeight; }};
struct PackCompressedBlockSize {template <typename Enum> operator Enum (void) const{ return Enum::PackCompressedBlockSize; }};
struct PackCompressedBlockWidth {template <typename Enum> operator Enum (void) const{ return Enum::PackCompressedBlockWidth; }};
struct PackImageHeight {template <typename Enum> operator Enum (void) const{ return Enum::PackImageHeight; }};
struct PackLsbFirst {template <typename Enum> operator Enum (void) const{ return Enum::PackLsbFirst; }};
struct PackRowLength {template <typename Enum> operator Enum (void) const{ return Enum::PackRowLength; }};
struct PackSkipImages {template <typename Enum> operator Enum (void) const{ return Enum::PackSkipImages; }};
struct PackSkipPixels {template <typename Enum> operator Enum (void) const{ return Enum::PackSkipPixels; }};
struct PackSkipRows {template <typename Enum> operator Enum (void) const{ return Enum::PackSkipRows; }};
struct PackSwapBytes {template <typename Enum> operator Enum (void) const{ return Enum::PackSwapBytes; }};
struct Patches {template <typename Enum> operator Enum (void) const{ return Enum::Patches; }};
struct Performance {template <typename Enum> operator Enum (void) const{ return Enum::Performance; }};
struct PixelBuffer {template <typename Enum> operator Enum (void) const{ return Enum::PixelBuffer; }};
struct PixelMode {template <typename Enum> operator Enum (void) const{ return Enum::PixelMode; }};
struct PixelPack {template <typename Enum> operator Enum (void) const{ return Enum::PixelPack; }};
struct PixelStore {template <typename Enum> operator Enum (void) const{ return Enum::PixelStore; }};
struct PixelUnpack {template <typename Enum> operator Enum (void) const{ return Enum::PixelUnpack; }};
struct Point {template <typename Enum> operator Enum (void) const{ return Enum::Point; }};
struct Points {template <typename Enum> operator Enum (void) const{ return Enum::Points; }};
struct Polygon {template <typename Enum> operator Enum (void) const{ return Enum::Polygon; }};
struct PolygonOffsetFill {template <typename Enum> operator Enum (void) const{ return Enum::PolygonOffsetFill; }};
struct PolygonOffsetLine {template <typename Enum> operator Enum (void) const{ return Enum::PolygonOffsetLine; }};
struct PolygonOffsetPoint {template <typename Enum> operator Enum (void) const{ return Enum::PolygonOffsetPoint; }};
struct PolygonSmooth {template <typename Enum> operator Enum (void) const{ return Enum::PolygonSmooth; }};
struct PolygonStipple {template <typename Enum> operator Enum (void) const{ return Enum::PolygonStipple; }};
struct Portability {template <typename Enum> operator Enum (void) const{ return Enum::Portability; }};
struct PrimaryColor {template <typename Enum> operator Enum (void) const{ return Enum::PrimaryColor; }};
struct PrimitiveRestart {template <typename Enum> operator Enum (void) const{ return Enum::PrimitiveRestart; }};
struct PrimitivesGenerated {template <typename Enum> operator Enum (void) const{ return Enum::PrimitivesGenerated; }};
struct ProgramPointSize {template <typename Enum> operator Enum (void) const{ return Enum::ProgramPointSize; }};
struct Projection {template <typename Enum> operator Enum (void) const{ return Enum::Projection; }};
struct PS {template <typename Enum> operator Enum (void) const{ return Enum::PS; }};
struct QuadraticCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::QuadraticCurveTo; }};
struct Quads {template <typename Enum> operator Enum (void) const{ return Enum::Quads; }};
struct QuadStrip {template <typename Enum> operator Enum (void) const{ return Enum::QuadStrip; }};
struct R {template <typename Enum> operator Enum (void) const{ return Enum::R; }};
struct R11FG11FB10F {template <typename Enum> operator Enum (void) const{ return Enum::R11FG11FB10F; }};
struct R16 {template <typename Enum> operator Enum (void) const{ return Enum::R16; }};
struct R16F {template <typename Enum> operator Enum (void) const{ return Enum::R16F; }};
struct R16I {template <typename Enum> operator Enum (void) const{ return Enum::R16I; }};
struct R16SNorm {template <typename Enum> operator Enum (void) const{ return Enum::R16SNorm; }};
struct R16UI {template <typename Enum> operator Enum (void) const{ return Enum::R16UI; }};
struct R32F {template <typename Enum> operator Enum (void) const{ return Enum::R32F; }};
struct R32I {template <typename Enum> operator Enum (void) const{ return Enum::R32I; }};
struct R32UI {template <typename Enum> operator Enum (void) const{ return Enum::R32UI; }};
struct R3G3B2 {template <typename Enum> operator Enum (void) const{ return Enum::R3G3B2; }};
struct R8 {template <typename Enum> operator Enum (void) const{ return Enum::R8; }};
struct R8I {template <typename Enum> operator Enum (void) const{ return Enum::R8I; }};
struct R8SNorm {template <typename Enum> operator Enum (void) const{ return Enum::R8SNorm; }};
struct R8UI {template <typename Enum> operator Enum (void) const{ return Enum::R8UI; }};
struct RasterizerDiscard {template <typename Enum> operator Enum (void) const{ return Enum::RasterizerDiscard; }};
struct Read {template <typename Enum> operator Enum (void) const{ return Enum::Read; }};
struct ReadOnly {template <typename Enum> operator Enum (void) const{ return Enum::ReadOnly; }};
struct ReadWrite {template <typename Enum> operator Enum (void) const{ return Enum::ReadWrite; }};
struct Rect {template <typename Enum> operator Enum (void) const{ return Enum::Rect; }};
struct Rectangle {template <typename Enum> operator Enum (void) const{ return Enum::Rectangle; }};
struct Red {template <typename Enum> operator Enum (void) const{ return Enum::Red; }};
struct RedInteger {template <typename Enum> operator Enum (void) const{ return Enum::RedInteger; }};
struct RelativeArcTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeArcTo; }};
struct RelativeCubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeCubicCurveTo; }};
struct RelativeHorizontalLineTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeHorizontalLineTo; }};
struct RelativeLargeCCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeLargeCCWArcTo; }};
struct RelativeLargeCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeLargeCWArcTo; }};
struct RelativeLineTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeLineTo; }};
struct RelativeMoveTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeMoveTo; }};
struct RelativeQuadraticCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeQuadraticCurveTo; }};
struct RelativeSmallCCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeSmallCCWArcTo; }};
struct RelativeSmallCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeSmallCWArcTo; }};
struct RelativeSmoothCubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeSmoothCubicCurveTo; }};
struct RelativeSmoothQuadraticCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeSmoothQuadraticCurveTo; }};
struct RelativeVerticalLineTo {template <typename Enum> operator Enum (void) const{ return Enum::RelativeVerticalLineTo; }};
struct Renderbuffer {template <typename Enum> operator Enum (void) const{ return Enum::Renderbuffer; }};
struct Renderer {template <typename Enum> operator Enum (void) const{ return Enum::Renderer; }};
struct Repeat {template <typename Enum> operator Enum (void) const{ return Enum::Repeat; }};
struct Replace {template <typename Enum> operator Enum (void) const{ return Enum::Replace; }};
struct RestartPath {template <typename Enum> operator Enum (void) const{ return Enum::RestartPath; }};
struct ReverseSubtract {template <typename Enum> operator Enum (void) const{ return Enum::ReverseSubtract; }};
struct RG {template <typename Enum> operator Enum (void) const{ return Enum::RG; }};
struct RG16 {template <typename Enum> operator Enum (void) const{ return Enum::RG16; }};
struct RG16F {template <typename Enum> operator Enum (void) const{ return Enum::RG16F; }};
struct RG16I {template <typename Enum> operator Enum (void) const{ return Enum::RG16I; }};
struct RG16SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RG16SNorm; }};
struct RG16UI {template <typename Enum> operator Enum (void) const{ return Enum::RG16UI; }};
struct RG32F {template <typename Enum> operator Enum (void) const{ return Enum::RG32F; }};
struct RG32I {template <typename Enum> operator Enum (void) const{ return Enum::RG32I; }};
struct RG32UI {template <typename Enum> operator Enum (void) const{ return Enum::RG32UI; }};
struct RG8 {template <typename Enum> operator Enum (void) const{ return Enum::RG8; }};
struct RG8I {template <typename Enum> operator Enum (void) const{ return Enum::RG8I; }};
struct RG8SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RG8SNorm; }};
struct RG8UI {template <typename Enum> operator Enum (void) const{ return Enum::RG8UI; }};
struct RGB {template <typename Enum> operator Enum (void) const{ return Enum::RGB; }};
struct RGB10 {template <typename Enum> operator Enum (void) const{ return Enum::RGB10; }};
struct RGB10A2 {template <typename Enum> operator Enum (void) const{ return Enum::RGB10A2; }};
struct RGB10A2UI {template <typename Enum> operator Enum (void) const{ return Enum::RGB10A2UI; }};
struct RGB10_A2UI {template <typename Enum> operator Enum (void) const{ return Enum::RGB10_A2UI; }};
struct RGB12 {template <typename Enum> operator Enum (void) const{ return Enum::RGB12; }};
struct RGB16 {template <typename Enum> operator Enum (void) const{ return Enum::RGB16; }};
struct RGB16F {template <typename Enum> operator Enum (void) const{ return Enum::RGB16F; }};
struct RGB16I {template <typename Enum> operator Enum (void) const{ return Enum::RGB16I; }};
struct RGB16SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RGB16SNorm; }};
struct RGB16UI {template <typename Enum> operator Enum (void) const{ return Enum::RGB16UI; }};
struct RGB32F {template <typename Enum> operator Enum (void) const{ return Enum::RGB32F; }};
struct RGB32I {template <typename Enum> operator Enum (void) const{ return Enum::RGB32I; }};
struct RGB32UI {template <typename Enum> operator Enum (void) const{ return Enum::RGB32UI; }};
struct RGB4 {template <typename Enum> operator Enum (void) const{ return Enum::RGB4; }};
struct RGB5 {template <typename Enum> operator Enum (void) const{ return Enum::RGB5; }};
struct RGB5A1 {template <typename Enum> operator Enum (void) const{ return Enum::RGB5A1; }};
struct RGB8 {template <typename Enum> operator Enum (void) const{ return Enum::RGB8; }};
struct RGB8I {template <typename Enum> operator Enum (void) const{ return Enum::RGB8I; }};
struct RGB8SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RGB8SNorm; }};
struct RGB8UI {template <typename Enum> operator Enum (void) const{ return Enum::RGB8UI; }};
struct RGB9E5 {template <typename Enum> operator Enum (void) const{ return Enum::RGB9E5; }};
struct RGBA {template <typename Enum> operator Enum (void) const{ return Enum::RGBA; }};
struct RGBA12 {template <typename Enum> operator Enum (void) const{ return Enum::RGBA12; }};
struct RGBA16 {template <typename Enum> operator Enum (void) const{ return Enum::RGBA16; }};
struct RGBA16F {template <typename Enum> operator Enum (void) const{ return Enum::RGBA16F; }};
struct RGBA16I {template <typename Enum> operator Enum (void) const{ return Enum::RGBA16I; }};
struct RGBA16SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RGBA16SNorm; }};
struct RGBA16UI {template <typename Enum> operator Enum (void) const{ return Enum::RGBA16UI; }};
struct RGBA2 {template <typename Enum> operator Enum (void) const{ return Enum::RGBA2; }};
struct RGBA32F {template <typename Enum> operator Enum (void) const{ return Enum::RGBA32F; }};
struct RGBA32I {template <typename Enum> operator Enum (void) const{ return Enum::RGBA32I; }};
struct RGBA32UI {template <typename Enum> operator Enum (void) const{ return Enum::RGBA32UI; }};
struct RGBA4 {template <typename Enum> operator Enum (void) const{ return Enum::RGBA4; }};
struct RGBA8 {template <typename Enum> operator Enum (void) const{ return Enum::RGBA8; }};
struct RGBA8I {template <typename Enum> operator Enum (void) const{ return Enum::RGBA8I; }};
struct RGBA8SNorm {template <typename Enum> operator Enum (void) const{ return Enum::RGBA8SNorm; }};
struct RGBA8UI {template <typename Enum> operator Enum (void) const{ return Enum::RGBA8UI; }};
struct RGBAInteger {template <typename Enum> operator Enum (void) const{ return Enum::RGBAInteger; }};
struct RGBInteger {template <typename Enum> operator Enum (void) const{ return Enum::RGBInteger; }};
struct RGInteger {template <typename Enum> operator Enum (void) const{ return Enum::RGInteger; }};
struct Right {template <typename Enum> operator Enum (void) const{ return Enum::Right; }};
struct Round {template <typename Enum> operator Enum (void) const{ return Enum::Round; }};
struct S {template <typename Enum> operator Enum (void) const{ return Enum::S; }};
struct SampleAlphaToCoverage {template <typename Enum> operator Enum (void) const{ return Enum::SampleAlphaToCoverage; }};
struct SampleAlphaToOne {template <typename Enum> operator Enum (void) const{ return Enum::SampleAlphaToOne; }};
struct SampleCoverage {template <typename Enum> operator Enum (void) const{ return Enum::SampleCoverage; }};
struct Sampler1D {template <typename Enum> operator Enum (void) const{ return Enum::Sampler1D; }};
struct Sampler1DArray {template <typename Enum> operator Enum (void) const{ return Enum::Sampler1DArray; }};
struct Sampler1DArrayShadow {template <typename Enum> operator Enum (void) const{ return Enum::Sampler1DArrayShadow; }};
struct Sampler1DShadow {template <typename Enum> operator Enum (void) const{ return Enum::Sampler1DShadow; }};
struct Sampler2D {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2D; }};
struct Sampler2DArray {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DArray; }};
struct Sampler2DArrayShadow {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DArrayShadow; }};
struct Sampler2DMultisample {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DMultisample; }};
struct Sampler2DMultisampleArray {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DMultisampleArray; }};
struct Sampler2DRect {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DRect; }};
struct Sampler2DRectShadow {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DRectShadow; }};
struct Sampler2DShadow {template <typename Enum> operator Enum (void) const{ return Enum::Sampler2DShadow; }};
struct Sampler3D {template <typename Enum> operator Enum (void) const{ return Enum::Sampler3D; }};
struct SamplerBuffer {template <typename Enum> operator Enum (void) const{ return Enum::SamplerBuffer; }};
struct SamplerCube {template <typename Enum> operator Enum (void) const{ return Enum::SamplerCube; }};
struct SamplerCubeMapArray {template <typename Enum> operator Enum (void) const{ return Enum::SamplerCubeMapArray; }};
struct SamplerCubeMapArrayShadow {template <typename Enum> operator Enum (void) const{ return Enum::SamplerCubeMapArrayShadow; }};
struct SamplerCubeShadow {template <typename Enum> operator Enum (void) const{ return Enum::SamplerCubeShadow; }};
struct SampleShading {template <typename Enum> operator Enum (void) const{ return Enum::SampleShading; }};
struct SamplesPassed {template <typename Enum> operator Enum (void) const{ return Enum::SamplesPassed; }};
struct Scissor {template <typename Enum> operator Enum (void) const{ return Enum::Scissor; }};
struct ScissorTest {template <typename Enum> operator Enum (void) const{ return Enum::ScissorTest; }};
struct SecondaryColor {template <typename Enum> operator Enum (void) const{ return Enum::SecondaryColor; }};
struct SeparateAttribs {template <typename Enum> operator Enum (void) const{ return Enum::SeparateAttribs; }};
struct Set {template <typename Enum> operator Enum (void) const{ return Enum::Set; }};
struct ShaderCompiler {template <typename Enum> operator Enum (void) const{ return Enum::ShaderCompiler; }};
struct ShaderImageAccess {template <typename Enum> operator Enum (void) const{ return Enum::ShaderImageAccess; }};
struct ShadingLanguageVersion {template <typename Enum> operator Enum (void) const{ return Enum::ShadingLanguageVersion; }};
struct Short {template <typename Enum> operator Enum (void) const{ return Enum::Short; }};
struct Signaled {template <typename Enum> operator Enum (void) const{ return Enum::Signaled; }};
struct Skip {template <typename Enum> operator Enum (void) const{ return Enum::Skip; }};
struct SmallCCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::SmallCCWArcTo; }};
struct SmallCWArcTo {template <typename Enum> operator Enum (void) const{ return Enum::SmallCWArcTo; }};
struct SmoothCubicCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::SmoothCubicCurveTo; }};
struct SmoothQuadraticCurveTo {template <typename Enum> operator Enum (void) const{ return Enum::SmoothQuadraticCurveTo; }};
struct Square {template <typename Enum> operator Enum (void) const{ return Enum::Square; }};
struct Src1Alpha {template <typename Enum> operator Enum (void) const{ return Enum::Src1Alpha; }};
struct Src1Color {template <typename Enum> operator Enum (void) const{ return Enum::Src1Color; }};
struct SrcAlpha {template <typename Enum> operator Enum (void) const{ return Enum::SrcAlpha; }};
struct SrcAlphaSaturate {template <typename Enum> operator Enum (void) const{ return Enum::SrcAlphaSaturate; }};
struct SrcColor {template <typename Enum> operator Enum (void) const{ return Enum::SrcColor; }};
struct SRGB8 {template <typename Enum> operator Enum (void) const{ return Enum::SRGB8; }};
struct SRGB8Alpha8 {template <typename Enum> operator Enum (void) const{ return Enum::SRGB8Alpha8; }};
struct StackOverflow {template <typename Enum> operator Enum (void) const{ return Enum::StackOverflow; }};
struct StackUnderflow {template <typename Enum> operator Enum (void) const{ return Enum::StackUnderflow; }};
struct Standard {template <typename Enum> operator Enum (void) const{ return Enum::Standard; }};
struct StaticCopy {template <typename Enum> operator Enum (void) const{ return Enum::StaticCopy; }};
struct StaticDraw {template <typename Enum> operator Enum (void) const{ return Enum::StaticDraw; }};
struct StaticRead {template <typename Enum> operator Enum (void) const{ return Enum::StaticRead; }};
struct Stencil {template <typename Enum> operator Enum (void) const{ return Enum::Stencil; }};
struct StencilBuffer {template <typename Enum> operator Enum (void) const{ return Enum::StencilBuffer; }};
struct StencilIndex {template <typename Enum> operator Enum (void) const{ return Enum::StencilIndex; }};
struct StencilTest {template <typename Enum> operator Enum (void) const{ return Enum::StencilTest; }};
struct StreamCopy {template <typename Enum> operator Enum (void) const{ return Enum::StreamCopy; }};
struct StreamDraw {template <typename Enum> operator Enum (void) const{ return Enum::StreamDraw; }};
struct StreamRead {template <typename Enum> operator Enum (void) const{ return Enum::StreamRead; }};
struct StrokeCover {template <typename Enum> operator Enum (void) const{ return Enum::StrokeCover; }};
struct Subtract {template <typename Enum> operator Enum (void) const{ return Enum::Subtract; }};
struct SVG {template <typename Enum> operator Enum (void) const{ return Enum::SVG; }};
struct System {template <typename Enum> operator Enum (void) const{ return Enum::System; }};
struct T {template <typename Enum> operator Enum (void) const{ return Enum::T; }};
struct TableTooLarge {template <typename Enum> operator Enum (void) const{ return Enum::TableTooLarge; }};
struct TessControl {template <typename Enum> operator Enum (void) const{ return Enum::TessControl; }};
struct TessControlShader {template <typename Enum> operator Enum (void) const{ return Enum::TessControlShader; }};
struct TessEvaluation {template <typename Enum> operator Enum (void) const{ return Enum::TessEvaluation; }};
struct TessEvaluationShader {template <typename Enum> operator Enum (void) const{ return Enum::TessEvaluationShader; }};
struct Texture {template <typename Enum> operator Enum (void) const{ return Enum::Texture; }};
struct TextureBuffer {template <typename Enum> operator Enum (void) const{ return Enum::TextureBuffer; }};
struct TextureCompression {template <typename Enum> operator Enum (void) const{ return Enum::TextureCompression; }};
struct TextureCubeMapSeamless {template <typename Enum> operator Enum (void) const{ return Enum::TextureCubeMapSeamless; }};
struct TextureFetch {template <typename Enum> operator Enum (void) const{ return Enum::TextureFetch; }};
struct TextureUpdate {template <typename Enum> operator Enum (void) const{ return Enum::TextureUpdate; }};
struct ThirdParty {template <typename Enum> operator Enum (void) const{ return Enum::ThirdParty; }};
struct TimeElapsed {template <typename Enum> operator Enum (void) const{ return Enum::TimeElapsed; }};
struct TimeoutExpired {template <typename Enum> operator Enum (void) const{ return Enum::TimeoutExpired; }};
struct Timestamp {template <typename Enum> operator Enum (void) const{ return Enum::Timestamp; }};
struct Transform {template <typename Enum> operator Enum (void) const{ return Enum::Transform; }};
struct TransformFeedback {template <typename Enum> operator Enum (void) const{ return Enum::TransformFeedback; }};
struct TransformFeedbackPrimitivesWritten {template <typename Enum> operator Enum (void) const{ return Enum::TransformFeedbackPrimitivesWritten; }};
struct Translate2D {template <typename Enum> operator Enum (void) const{ return Enum::Translate2D; }};
struct Translate3D {template <typename Enum> operator Enum (void) const{ return Enum::Translate3D; }};
struct TranslateX {template <typename Enum> operator Enum (void) const{ return Enum::TranslateX; }};
struct TranslateY {template <typename Enum> operator Enum (void) const{ return Enum::TranslateY; }};
struct TransposeAffine2D {template <typename Enum> operator Enum (void) const{ return Enum::TransposeAffine2D; }};
struct TransposeAffine3D {template <typename Enum> operator Enum (void) const{ return Enum::TransposeAffine3D; }};
struct TriangleFan {template <typename Enum> operator Enum (void) const{ return Enum::TriangleFan; }};
struct Triangles {template <typename Enum> operator Enum (void) const{ return Enum::Triangles; }};
struct TrianglesAdjacency {template <typename Enum> operator Enum (void) const{ return Enum::TrianglesAdjacency; }};
struct TriangleStrip {template <typename Enum> operator Enum (void) const{ return Enum::TriangleStrip; }};
struct TriangleStripAdjacency {template <typename Enum> operator Enum (void) const{ return Enum::TriangleStripAdjacency; }};
struct Triangular {template <typename Enum> operator Enum (void) const{ return Enum::Triangular; }};
struct Undefined {template <typename Enum> operator Enum (void) const{ return Enum::Undefined; }};
struct UndefinedBehavior {template <typename Enum> operator Enum (void) const{ return Enum::UndefinedBehavior; }};
struct Uniform {template <typename Enum> operator Enum (void) const{ return Enum::Uniform; }};
struct UnpackAlignment {template <typename Enum> operator Enum (void) const{ return Enum::UnpackAlignment; }};
struct UnpackCompressedBlockDepth {template <typename Enum> operator Enum (void) const{ return Enum::UnpackCompressedBlockDepth; }};
struct UnpackCompressedBlockHeight {template <typename Enum> operator Enum (void) const{ return Enum::UnpackCompressedBlockHeight; }};
struct UnpackCompressedBlockSize {template <typename Enum> operator Enum (void) const{ return Enum::UnpackCompressedBlockSize; }};
struct UnpackCompressedBlockWidth {template <typename Enum> operator Enum (void) const{ return Enum::UnpackCompressedBlockWidth; }};
struct UnpackImageHeight {template <typename Enum> operator Enum (void) const{ return Enum::UnpackImageHeight; }};
struct UnpackLsbFirst {template <typename Enum> operator Enum (void) const{ return Enum::UnpackLsbFirst; }};
struct UnpackRowLength {template <typename Enum> operator Enum (void) const{ return Enum::UnpackRowLength; }};
struct UnpackSkipImages {template <typename Enum> operator Enum (void) const{ return Enum::UnpackSkipImages; }};
struct UnpackSkipPixels {template <typename Enum> operator Enum (void) const{ return Enum::UnpackSkipPixels; }};
struct UnpackSkipRows {template <typename Enum> operator Enum (void) const{ return Enum::UnpackSkipRows; }};
struct UnpackSwapBytes {template <typename Enum> operator Enum (void) const{ return Enum::UnpackSwapBytes; }};
struct Unsignaled {template <typename Enum> operator Enum (void) const{ return Enum::Unsignaled; }};
struct UnsignedByte {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedByte; }};
struct UnsignedByte_2_3_3_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedByte_2_3_3_Rev; }};
struct UnsignedByte_3_3_2 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedByte_3_3_2; }};
struct UnsignedInt {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt; }};
struct UnsignedInt_10_10_10_2 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_10_10_10_2; }};
struct UnsignedInt_10f_11f_11f_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_10f_11f_11f_Rev; }};
struct UnsignedInt_2_10_10_10_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_2_10_10_10_Rev; }};
struct UnsignedInt_24_8 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_24_8; }};
struct UnsignedInt_5_9_9_9_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_5_9_9_9_Rev; }};
struct UnsignedInt_8_8_8_8 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_8_8_8_8; }};
struct UnsignedInt_8_8_8_8_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedInt_8_8_8_8_Rev; }};
struct UnsignedIntSampler1D {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler1D; }};
struct UnsignedIntSampler1DArray {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler1DArray; }};
struct UnsignedIntSampler2D {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler2D; }};
struct UnsignedIntSampler2DArray {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler2DArray; }};
struct UnsignedIntSampler2DMultisample {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler2DMultisample; }};
struct UnsignedIntSampler2DMultisampleArray {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler2DMultisampleArray; }};
struct UnsignedIntSampler2DRect {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler2DRect; }};
struct UnsignedIntSampler3D {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSampler3D; }};
struct UnsignedIntSamplerBuffer {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSamplerBuffer; }};
struct UnsignedIntSamplerCube {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSamplerCube; }};
struct UnsignedIntSamplerCubeMapArray {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntSamplerCubeMapArray; }};
struct UnsignedIntVec2 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntVec2; }};
struct UnsignedIntVec3 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntVec3; }};
struct UnsignedIntVec4 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedIntVec4; }};
struct UnsignedShort {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort; }};
struct UnsignedShort_1_5_5_5_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_1_5_5_5_Rev; }};
struct UnsignedShort_4_4_4_4 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_4_4_4_4; }};
struct UnsignedShort_4_4_4_4_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_4_4_4_4_Rev; }};
struct UnsignedShort_5_5_5_1 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_5_5_5_1; }};
struct UnsignedShort_5_6_5 {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_5_6_5; }};
struct UnsignedShort_5_6_5_Rev {template <typename Enum> operator Enum (void) const{ return Enum::UnsignedShort_5_6_5_Rev; }};
struct Unsupported {template <typename Enum> operator Enum (void) const{ return Enum::Unsupported; }};
struct Use {template <typename Enum> operator Enum (void) const{ return Enum::Use; }};
struct UTF16 {template <typename Enum> operator Enum (void) const{ return Enum::UTF16; }};
struct UTF8 {template <typename Enum> operator Enum (void) const{ return Enum::UTF8; }};
struct Vendor {template <typename Enum> operator Enum (void) const{ return Enum::Vendor; }};
struct Version {template <typename Enum> operator Enum (void) const{ return Enum::Version; }};
struct Vertex {template <typename Enum> operator Enum (void) const{ return Enum::Vertex; }};
struct VertexArray {template <typename Enum> operator Enum (void) const{ return Enum::VertexArray; }};
struct VertexAttribArray {template <typename Enum> operator Enum (void) const{ return Enum::VertexAttribArray; }};
struct VertexShader {template <typename Enum> operator Enum (void) const{ return Enum::VertexShader; }};
struct VerticalLineTo {template <typename Enum> operator Enum (void) const{ return Enum::VerticalLineTo; }};
struct Viewport {template <typename Enum> operator Enum (void) const{ return Enum::Viewport; }};
struct WaitFailed {template <typename Enum> operator Enum (void) const{ return Enum::WaitFailed; }};
struct WindowSystem {template <typename Enum> operator Enum (void) const{ return Enum::WindowSystem; }};
struct WriteOnly {template <typename Enum> operator Enum (void) const{ return Enum::WriteOnly; }};
struct Xor {template <typename Enum> operator Enum (void) const{ return Enum::Xor; }};
struct Zero {template <typename Enum> operator Enum (void) const{ return Enum::Zero; }};
