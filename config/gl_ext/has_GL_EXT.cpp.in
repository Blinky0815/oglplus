/**
 *  Copyright 2010-2013 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#include <oglplus/gl.hpp>

#include <cstring>
#include <cstddef>

#if @GLUT_FOUND@
#include <GL/glut.h>
#endif

#define EXT_VENDOR @EXTENSION_VENDOR@
#define EXT_NAME @EXTENSION_NAME@

#define EXT_VENDOR_STR "@EXTENSION_VENDOR@"
#define EXT_NAME_STR "@EXTENSION_NAME@"

bool gl_has_extension(const char* ext_vendor, const char* ext_name)
{
	GLint num_ext = 0;
	glGetIntegerv(GL_NUM_EXTENSIONS, &num_ext);

	for(GLint i=0; i<num_ext; ++i)
	{
		const char* ext_str = (const char*)glGetStringi(GL_EXTENSIONS, i);

		std::ptrdiff_t o0 = 0;
		std::ptrdiff_t o1 = 3;
		std::ptrdiff_t o2 = 3+std::strlen(ext_vendor)+1;
		if(
			(std::strstr(ext_str, "GL_") == ext_str+o0) &&
			(std::strstr(ext_str, ext_vendor) == ext_str+o1) &&
			(std::strstr(ext_str, ext_name) == ext_str+o2) &&
			(std::strcmp(ext_str+o2, ext_name) == 0)
		) return true;
	}
	return false;
}

#if @GLUT_FOUND@
bool gl_extension_is_available_GLUT(const char* ext_vendor, const char* ext_name)
{
	int argc = 0;
	char** argv = nullptr;
	glutInit(&argc, argv);
	glutInitDisplayMode(
		GLUT_DOUBLE|
		GLUT_RGBA|
		GLUT_DEPTH|
		GLUT_STENCIL
	);
	glutInitWindowSize(64, 64);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("GL_" EXT_VENDOR_STR "_" EXT_NAME_STR " extension detection");

	oglplus::GLAPIInitializer gl_api;

	return gl_has_extension(ext_vendor, ext_name);
}
#endif

bool gl_extension_is_available(const char* ext_vendor, const char* ext_name)
{
#if @GLUT_FOUND@
	return gl_extension_is_available_GLUT(ext_vendor, ext_name);
#else
	return true;
#endif
}

int main(void)
{
#if !defined GL_@EXTENSION_VENDOR@_@EXTENSION_NAME@
	return 1;
#elif !GL_@EXTENSION_VENDOR@_@EXTENSION_NAME@
	return 1;
#elif !@OGLPLUS_CONFIG_STRICT_VERSION_CHECK@
	return 0;
#else
	return gl_extension_is_available(
		EXT_VENDOR_STR,
		EXT_NAME_STR
	)?0:1;
#endif
}
